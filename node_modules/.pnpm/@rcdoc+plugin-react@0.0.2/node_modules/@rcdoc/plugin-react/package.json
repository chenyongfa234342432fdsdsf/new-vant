{
  "name": "@rcdoc/plugin-react",
  "version": "0.0.2",
  "license": "MIT",
  "author": "Evan You",
  "contributors": [
    "Alec Larson"
  ],
  "files": [
    "dist",
    "src"
  ],
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "engines": {
    "node": ">=12.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vitejs/vite.git",
    "directory": "packages/plugin-react"
  },
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "bugs": {
    "url": "https://github.com/vitejs/vite/issues"
  },
  "homepage": "https://github.com/vitejs/vite/tree/main/packages/plugin-react#readme",
  "dependencies": {
    "@babel/core": "^7.17.9",
    "@babel/plugin-transform-react-jsx": "^7.17.3",
    "@babel/plugin-transform-react-jsx-development": "^7.16.7",
    "@babel/plugin-transform-react-jsx-self": "^7.16.7",
    "@babel/plugin-transform-react-jsx-source": "^7.16.7",
    "@rollup/pluginutils": "^4.2.1",
    "react-refresh": "^0.12.0"
  },
  "devDependencies": {
    "@microsoft/api-extractor": "^7.23.0",
    "@types/resolve": "^1.20.2",
    "esbuild": "^0.14.21",
    "npm-run-all": "^4.1.5",
    "picocolors": "^1.0.0",
    "resolve": "^1.22.0",
    "rimraf": "^3.0.2",
    "ts-node": "^10.7.0",
    "typescript": "^4.4.4",
    "vite": "^2.9.6"
  },
  "scripts": {
    "dev": "tsc -p . -w --incremental",
    "build": "rimraf dist && run-s build-bundle build-types",
    "build-bundle": "esbuild src/index.ts --bundle --platform=node --target=node12 --external:@babel/* --external:@rollup/* --external:resolve --external:react-refresh/* --outfile=dist/index.js && npm run patch-dist",
    "patch-dist": "ts-node scripts/patchEsbuildDist.ts dist/index.js viteReact",
    "build-types": "tsc -p . --emitDeclarationOnly --outDir temp && api-extractor run && rimraf temp"
  },
  "readme": "# @vitejs/plugin-react [![npm](https://img.shields.io/npm/v/@vitejs/plugin-react.svg)](https://npmjs.com/package/@vitejs/plugin-react)\n\nThe all-in-one Vite plugin for React projects.\n\n- enable [Fast Refresh](https://www.npmjs.com/package/react-refresh) in development\n- use the [automatic JSX runtime](https://github.com/alloc/vite-react-jsx#faq)\n- avoid manual `import React` in `.jsx` and `.tsx` modules\n- dedupe the `react` and `react-dom` packages\n- use custom Babel plugins/presets\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [react()],\n});\n```\n\n## Filter which files use Fast Refresh\n\nBy default, Fast Refresh is used by files ending with `.js`, `.jsx`, `.ts`, and `.tsx`, except for files with a `node_modules` parent directory.\n\nIn some situations, you may not want a file to act as a HMR boundary, instead preferring that the changes propagate higher in the stack before being handled. In these cases, you can provide an `include` and/or `exclude` option, which can be a regex, a [picomatch](https://github.com/micromatch/picomatch#globbing-features) pattern, or an array of either. Files matching `include` and not `exclude` will use Fast Refresh. The defaults are always applied.\n\n```js\nreact({\n  // Exclude storybook stories\n  exclude: /\\.stories\\.(t|j)sx?$/,\n  // Only .tsx files\n  include: '**/*.tsx',\n});\n```\n\n## Opting out of the automatic JSX runtime\n\nBy default, the plugin uses the [automatic JSX runtime](https://github.com/alloc/vite-react-jsx#faq). However, if you encounter any issues, you may opt out using the `jsxRuntime` option.\n\n```js\nreact({\n  jsxRuntime: 'classic',\n});\n```\n\n## Babel configuration\n\nThe `babel` option lets you add plugins, presets, and [other configuration](https://babeljs.io/docs/en/options) to the Babel transformation performed on each JSX/TSX file.\n\n```js\nreact({\n  babel: {\n    presets: [...],\n    // Your plugins run before any built-in transform (eg: Fast Refresh)\n    plugins: [...],\n    // Use .babelrc files\n    babelrc: true,\n    // Use babel.config.js files\n    configFile: true,\n  }\n})\n```\n\n### Proposed syntax\n\nIf you are using ES syntax that are still in proposal status (e.g. class properties), you can selectively enable them with the `babel.parserOpts.plugins` option:\n\n```js\nreact({\n  babel: {\n    parserOpts: {\n      plugins: ['decorators-legacy'],\n    },\n  },\n});\n```\n\nThis option does not enable _code transformation_. That is handled by esbuild.\n\n**Note:** TypeScript syntax is handled automatically.\n\nHere's the [complete list of Babel parser plugins](https://babeljs.io/docs/en/babel-parser#ecmascript-proposalshttpsgithubcombabelproposals).\n\n## Middleware mode\n\nIn [middleware mode](https://vitejs.dev/config/#server-middlewaremode), you should make sure your entry `index.html` file is transformed by Vite. Here's an example for an Express server:\n\n```js\napp.get('/', async (req, res, next) => {\n  try {\n    let html = fs.readFileSync(path.resolve(root, 'index.html'), 'utf-8');\n\n    // Transform HTML using Vite plugins.\n    html = await viteServer.transformIndexHtml(req.url, html);\n\n    res.send(html);\n  } catch (e) {\n    return next(e);\n  }\n});\n```\n\nOtherwise, you'll probably get this error:\n\n```\nUncaught Error: @vitejs/plugin-react can't detect preamble. Something is wrong.\n```\n"
}