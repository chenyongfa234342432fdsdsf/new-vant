import {
  getRepoUrl,
  resolveJsFile
} from "./chunk-PLIM7P7F.js";
import {
  init
} from "./chunk-WOQRSCMF.js";
import {
  ROOT,
  SITE_SHARD_CONFIG_FILE,
  getPackageJson
} from "./chunk-D3YCLLHO.js";

// src/compiler/resolve-config.ts
import fs from "fs";
import fse from "fs-extra";
import { merge } from "lodash-es";
import JoyCon from "joycon";
import path from "path";
import strip from "strip-json-comments";
var getPackageJsonRepository = () => {
  const { repository } = getPackageJson();
  return repository || {};
};
var defaultConfig = {
  locales: [
    ["zh-CN", "\u4E2D\u6587"],
    ["en-US", "English"]
  ],
  resolve: {
    includes: ["docs", "src"],
    previewLangs: ["jsx", "tsx"]
  },
  site: {
    history: "broswer",
    slug: "content",
    injectComponentCss: true
  },
  build: {
    entry: "./src",
    style: "index.less"
  },
  repository: getPackageJsonRepository()
};
function jsoncParse(data) {
  try {
    return new Function("return " + strip(data).trim())();
  } catch {
    return {};
  }
}
var joycon = new JoyCon();
var loadJson = async (filepath) => {
  try {
    return jsoncParse(await fs.promises.readFile(filepath, "utf8"));
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Failed to parse ${path.relative(ROOT, filepath)}: ${error.message}`);
    } else {
      throw error;
    }
  }
};
var jsonLoader = {
  test: /\.json$/,
  load(filepath) {
    return loadJson(filepath);
  }
};
joycon.addLoader(jsonLoader);
async function resolveConfig(cwd = ROOT) {
  const configJoycon = new JoyCon();
  const configPath = await configJoycon.resolve(["rcdoc.config.ts", "rcdoc.config.js", "rcdoc.config.mjs", "rcdoc.config.json"], cwd, path.parse(cwd).root);
  if (configPath) {
    await parseConfig(configPath);
  }
}
async function parseConfig(configPath) {
  var _a, _b, _c, _d;
  if (configPath.endsWith(".json")) {
    let data2 = await loadJson(configPath);
    if (data2) {
      if ((_a = data2.repository) == null ? void 0 : _a.url) {
        data2.repository.url = getRepoUrl(data2.repository.url, (_b = data2.repository) == null ? void 0 : _b.platform);
      }
      init(data2, configPath);
      return;
    }
  }
  const data = await resolveJsFile(configPath);
  const mergedData = merge(JSON.parse(JSON.stringify(defaultConfig)), data);
  if ((_c = mergedData.repository) == null ? void 0 : _c.url) {
    mergedData.repository.url = getRepoUrl(mergedData.repository.url, (_d = mergedData.repository) == null ? void 0 : _d.platform);
  }
  fse.outputFileSync(SITE_SHARD_CONFIG_FILE, JSON.stringify(mergedData, null, 2));
  init(mergedData, configPath);
}

export {
  resolveConfig,
  parseConfig
};
