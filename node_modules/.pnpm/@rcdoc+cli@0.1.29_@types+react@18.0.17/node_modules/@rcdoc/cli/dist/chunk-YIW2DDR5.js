import {
  getViteConfigForPackage
} from "./chunk-KUEQXLCB.js";
import {
  resolveConfig
} from "./chunk-K5Z3DVLQ.js";
import {
  context_default
} from "./chunk-WOQRSCMF.js";
import {
  MDOC_BUILD_CONFIG_FILE,
  PROJECT_DIST_DIR,
  ROOT
} from "./chunk-D3YCLLHO.js";
import {
  __spreadValues
} from "./chunk-OKPPX6YV.js";

// src/commands/build.ts
import path from "path";
import { remove } from "fs-extra";
import rcdocBuild from "@rcdoc/build";
import { build as viteBuild } from "vite";
import chalk from "chalk";
var compileBundlesByVite = async () => {
  var _a;
  const { bundleDir = "" } = (_a = context_default.opts) == null ? void 0 : _a.build;
  const viteBundleDir = path.join(PROJECT_DIST_DIR, bundleDir);
  const configs = [
    getViteConfigForPackage({ outputDir: viteBundleDir, format: "es" }),
    getViteConfigForPackage({ outputDir: viteBundleDir, minify: true, format: "umd" }),
    getViteConfigForPackage({ outputDir: viteBundleDir, format: "umd" })
  ];
  await Promise.all(configs.map(async (cfg) => await viteBuild(cfg)));
};
var compileBundlesByMdocBuild = async () => {
  const { build: buildProps = {} } = context_default.opts;
  await rcdocBuild["default"]({
    cwd: ROOT,
    clean: false,
    needTransform: false,
    buildArgs: __spreadValues({ config: MDOC_BUILD_CONFIG_FILE }, buildProps)
  });
};
function build() {
  console.log(`${chalk.green("[rcdoc cli]:")} build start`);
  console.log(`${chalk.gray("[rcdoc cli]:")} clean dist dir...`);
  remove(PROJECT_DIST_DIR, async () => {
    await resolveConfig();
    console.log(`${chalk.gray("[rcdoc cli]:")} vite bundle building...`);
    await compileBundlesByVite();
    console.log(`${chalk.gray("[rcdoc cli]:")} babel transform ...`);
    await compileBundlesByMdocBuild();
    console.log(`${chalk.green("[rcdoc cli]:")} build done!`);
  });
}

export {
  build
};
