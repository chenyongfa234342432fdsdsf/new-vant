import {
  context_default
} from "./chunk-WOQRSCMF.js";
import {
  CWD,
  PROJECT_POSTCSS_CONFIG_FILE,
  ROOT
} from "./chunk-D3YCLLHO.js";
import {
  __require
} from "./chunk-OKPPX6YV.js";

// src/common/index.ts
import glob from "fast-glob";
import fse from "fs-extra";
import path from "path";
import slash from "slash2";
import { get } from "lodash-es";
import hostedGit from "hosted-git-info";
import { bundleRequire } from "bundle-require";
var { lstatSync, existsSync, readFileSync, outputFileSync } = fse;
var EXT_REGEXP = /\.\w+$/;
var DEMO_REGEXP = new RegExp(`\\${path.sep}demo$`);
var TEST_REGEXP = new RegExp(`\\${path.sep}test$`);
var ASSET_REGEXP = /\.(png|jpe?g|gif|webp|ico|jfif|svg|woff2?|ttf)$/i;
var STYLE_REGEXP = /\.(css|less|scss)$/;
var SCRIPT_REGEXP = /\.(js|ts|jsx|tsx)$/;
var TYPESCRIPT_REGEXP = /\.(ts||tsx)$/;
var ENTRY_EXTS = ["js", "ts", "tsx", "jsx"];
function removeExt(path2) {
  return path2.replace(".tsx", "");
}
function replaceExt(path2, ext) {
  return path2.replace(EXT_REGEXP, ext);
}
function hasDefaultExport(code) {
  return code.includes("export default") || code.includes("export { default }");
}
function getComponents() {
  var _a;
  const EXCLUDES = [".DS_Store"];
  const dirs = glob.sync(slash(path.join("src", "**", (_a = context_default.opts) == null ? void 0 : _a.build.style))).map((_dir) => {
    var _a2;
    const dir = path.join(CWD, _dir);
    return dir.replace(path.join("/", (_a2 = context_default.opts) == null ? void 0 : _a2.build.style), "");
  });
  return dirs.filter((dir) => !EXCLUDES.includes(dir)).map((dir) => {
    const guessPath = getExistFile({
      cwd: false,
      files: ENTRY_EXTS.map((ext) => path.join(dir, `index.${ext}`))
    });
    const guessMdPath = path.join(dir, "README.md");
    if (guessPath && existsSync(guessMdPath) && hasDefaultExport(readFileSync(guessPath, "utf-8"))) {
      return slash(guessPath);
    }
    return "";
  }).filter(Boolean);
}
function isDir(dir) {
  return lstatSync(dir).isDirectory();
}
function isDemoDir(dir) {
  return DEMO_REGEXP.test(dir);
}
function isTestDir(dir) {
  return TEST_REGEXP.test(dir);
}
function isAsset(path2) {
  return ASSET_REGEXP.test(path2);
}
function isStyle(path2) {
  return STYLE_REGEXP.test(path2);
}
function isScript(path2) {
  return SCRIPT_REGEXP.test(path2) && !path2.endsWith(".d.ts");
}
function isTsFile(path2) {
  return TYPESCRIPT_REGEXP.test(path2) && !path2.endsWith(".d.ts");
}
var camelizeRE = /-(\w)/g;
var pascalizeRE = /(\w)(\w*)/g;
function camelize(str) {
  return str.replace(camelizeRE, (_, c) => c.toUpperCase());
}
function pascalize(str) {
  return camelize(str).replace(pascalizeRE, (_, c1, c2) => c1.toUpperCase() + c2);
}
function decamelize(str, sepc = "-") {
  return str.replace(/([a-z\d])([A-Z])/g, `$1${sepc}$2`).replace(/([A-Z]+)([A-Z][a-z\d]+)/g, `$1${sepc}$2`).toLowerCase();
}
function normalizePath(path2) {
  return path2.replace(/\\/g, "/");
}
function getPostcssConfig() {
  if (existsSync(PROJECT_POSTCSS_CONFIG_FILE)) {
    return __require(PROJECT_POSTCSS_CONFIG_FILE);
  }
  return {};
}
function setModuleEnv(value) {
  process.env.BABEL_MODULE = value;
}
function setNodeEnv(value) {
  process.env.NODE_ENV = value;
}
function setBuildTarget(value) {
  process.env.BUILD_TARGET = value;
}
function isDev() {
  return process.env.NODE_ENV === "development";
}
function smartOutputFile(filePath, content) {
  if (existsSync(filePath)) {
    const previousContent = readFileSync(filePath, "utf-8");
    if (previousContent === content) {
      return;
    }
  }
  outputFileSync(filePath, content);
}
function kebabCase(str) {
  return str.replace(/([A-Z])/g, "-$1").toLowerCase().replace(/^-/, "");
}
function mergeCustomViteConfig(config) {
  const configureVite = get(context_default.opts, "build.configureVite");
  if (configureVite) {
    return configureVite(config);
  }
  return config;
}
function getConfigThemeAlias() {
  let siteTheme = get(context_default.opts, "site.theme");
  if (siteTheme) {
    siteTheme = slash(path.join(ROOT, "node_modules", siteTheme));
    return { "rcdoc-theme-default": siteTheme };
  }
  return {};
}
function getExistFile({
  cwd = CWD,
  files
}) {
  for (const file of files) {
    const absFilePath = typeof cwd === "boolean" ? file : path.join(cwd, file);
    if (existsSync(absFilePath)) {
      return absFilePath;
    }
  }
}
function isObject(val) {
  return Object.prototype.toString.call(val) === "[object Object]";
}
function getRepoUrl(url, platform) {
  var _a, _b, _c;
  if (!url || typeof url !== "string")
    return "";
  let repoUrl = (_a = hostedGit.fromUrl(url)) == null ? void 0 : _a.browse();
  if (!repoUrl) {
    const isHttpProtocol = url.includes("http://");
    if (["gitlab", "bitbucket"].includes(platform)) {
      if (isHttpProtocol)
        url = url.replace("http", "https");
      let originalHost;
      repoUrl = (_c = (_b = hostedGit.fromUrl(url.replace(/([\w-]+\.)+[\w-]+/, (str) => {
        originalHost = str;
        return "gitlab.com";
      }))) == null ? void 0 : _b.browse()) == null ? void 0 : _c.replace("gitlab.com", originalHost);
    }
    repoUrl = repoUrl || url.replace(/^.*?((?:[\w-]+\.?)+)+[:/]([\w-]+)\/([\w-]+).*$/, "https://$1/$2/$3");
    if (isHttpProtocol)
      repoUrl = repoUrl.replace("https", "http");
  }
  return repoUrl;
}
async function resolveJsFile(filepath) {
  const result = await bundleRequire({
    filepath
  });
  return result.mod.default || result.mod;
}
function getEntryPath() {
  var _a;
  const { entry } = (_a = context_default.opts) == null ? void 0 : _a.build;
  try {
    fse.readFileSync(path.join(CWD, entry));
    return path.join(CWD, entry);
  } catch (error) {
    const files = ["index.ts", "index.tsx", "index.js", "index.jsx"].map((el) => path.join(entry, el));
    const entryFilePath = getExistFile({
      files
    });
    return entryFilePath;
  }
}

export {
  EXT_REGEXP,
  DEMO_REGEXP,
  TEST_REGEXP,
  ASSET_REGEXP,
  STYLE_REGEXP,
  SCRIPT_REGEXP,
  TYPESCRIPT_REGEXP,
  ENTRY_EXTS,
  removeExt,
  replaceExt,
  hasDefaultExport,
  getComponents,
  isDir,
  isDemoDir,
  isTestDir,
  isAsset,
  isStyle,
  isScript,
  isTsFile,
  camelize,
  pascalize,
  decamelize,
  normalizePath,
  getPostcssConfig,
  setModuleEnv,
  setNodeEnv,
  setBuildTarget,
  isDev,
  smartOutputFile,
  kebabCase,
  mergeCustomViteConfig,
  getConfigThemeAlias,
  getExistFile,
  isObject,
  getRepoUrl,
  resolveJsFile,
  getEntryPath
};
