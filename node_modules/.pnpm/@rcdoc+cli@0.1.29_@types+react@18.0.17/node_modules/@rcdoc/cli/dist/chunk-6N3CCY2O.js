import {
  resolveJsFile
} from "./chunk-PLIM7P7F.js";
import {
  context_default
} from "./chunk-WOQRSCMF.js";
import {
  PROJECT_SITE_DIST_DIR,
  SITE_SHARED_MENU_FILE
} from "./chunk-D3YCLLHO.js";

// src/compiler/gen-sitemap.ts
import fse from "fs-extra";
import path from "path";
import { SitemapStream } from "sitemap";
async function genSitemap() {
  var _a, _b, _c;
  const { hostname, exclude = [] } = (_c = (_b = (_a = context_default) == null ? void 0 : _a.opts) == null ? void 0 : _b.site) == null ? void 0 : _c.sitemap;
  const smis = new SitemapStream({
    hostname,
    xmlns: { video: false, image: false, news: false, xhtml: false }
  });
  const menuJson = await resolveJsFile(SITE_SHARED_MENU_FILE);
  const excludes = ["/404"].concat(exclude);
  const writeStream = fse.createWriteStream(path.join(PROJECT_SITE_DIST_DIR, "sitemap.xml"));
  const routes = getAllMenuByJson(menuJson);
  smis.pipe(writeStream);
  routes.forEach((route) => {
    if (!excludes.includes(route) && !route.includes("~")) {
      smis.write({ url: route });
    }
  });
  smis.end();
  await new Promise((resolve) => writeStream.on("close", resolve));
  console.info("sitemap.xml generated successfully!");
}
function getAllMenuByJson(menuJson) {
  const menuValues = Object.values(menuJson).reduce((acc, cur) => acc.concat(cur), []);
  const routes = [];
  function search(menu) {
    if (Array.isArray(menu.children)) {
      menu.children.forEach(search);
    } else {
      routes.push(menu.langPath || menu.path);
    }
  }
  menuValues.forEach(search);
  return routes;
}

export {
  genSitemap
};
