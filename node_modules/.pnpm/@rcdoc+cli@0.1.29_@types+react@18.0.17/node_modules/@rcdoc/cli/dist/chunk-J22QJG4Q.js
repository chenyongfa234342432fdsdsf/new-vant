import {
  getViteConfigForSiteDev,
  getViteConfigForSiteProd
} from "./chunk-FJ5WMOQG.js";
import {
  genSiteDesktopShared
} from "./chunk-3JZJACPY.js";
import {
  genStyleDepsMap
} from "./chunk-IEHWM4N6.js";
import {
  signit
} from "./chunk-6MMLDMEW.js";
import {
  gen_custom_component_default
} from "./chunk-BNHXAF4L.js";
import {
  genPackageStyle
} from "./chunk-MWF7BALE.js";
import {
  genSiteMenuShared
} from "./chunk-WYVUPVZU.js";
import {
  getCssLang
} from "./chunk-67CKMM2A.js";
import {
  getMarkdownContentMeta,
  getTitleAndLangByFilepath
} from "./chunk-PRTLF3TM.js";
import {
  parseConfig
} from "./chunk-K5Z3DVLQ.js";
import {
  mergeCustomViteConfig,
  replaceExt,
  resolveJsFile
} from "./chunk-PLIM7P7F.js";
import {
  context_default,
  updateServer
} from "./chunk-WOQRSCMF.js";
import {
  CWD,
  PACKAGE_STYLE_FILE,
  SITE_SHARED_MENU_FILE
} from "./chunk-D3YCLLHO.js";

// src/compiler/compile-site.ts
import chalk from "chalk";
import { createRequire } from "module";
import { createServer, build } from "vite";

// src/compiler/watch-site-shared.ts
import path from "path";
import chokidar from "chokidar";
function watchSiteShared() {
  const watcher = chokidar.watch(context_default.opts.resolve.includes.map((p) => path.join(CWD, p, "**/*.md")), {
    ignored: context_default.opts.resolve.excludes = [],
    ignoreInitial: true
  });
  watcher.on("change", async (filePath) => {
    await updateMenuFile(filePath);
  }).on("add", async (filePath) => {
    watcher.add(filePath);
    await restart();
  }).on("unlink", async (filePath) => {
    watcher.unwatch(filePath);
    await restart();
  });
  context_default.watchers.push(watcher);
}
async function updateMenuFile(filePath) {
  let needUpdate = false;
  const { headings, frontmatter } = getMarkdownContentMeta(filePath);
  const { title } = getTitleAndLangByFilepath(filePath);
  const updateTitle = (frontmatter == null ? void 0 : frontmatter.title) || (headings == null ? void 0 : headings[0]) || title;
  const menus = await resolveJsFile(SITE_SHARED_MENU_FILE);
  Object.keys(menus).forEach((lang) => {
    const routes = menus[lang];
    function search(route) {
      if (route.filePath === filePath) {
        if (route.title !== updateTitle) {
          route.title = updateTitle;
          needUpdate = true;
        }
        if (frontmatter.group && route.group !== frontmatter.group) {
          route.group = frontmatter.group;
          needUpdate = true;
        }
        return;
      }
      if (route.children) {
        route.children.forEach(search);
      }
    }
    routes.forEach(search);
  });
  if (needUpdate) {
    genSiteMenuShared(menus);
  }
}

// src/compiler/watch-config.ts
import chokidar2 from "chokidar";
function watchConfig() {
  const watcher = chokidar2.watch(context_default.configFilePath, {
    ignoreInitial: true
  });
  watcher.on("change", async () => {
    await parseConfig(context_default.configFilePath);
    await genSiteEntry();
    context_default.server.restart();
  });
  context_default.watchers.push(watcher);
}

// src/compiler/compile-site.ts
async function genSiteEntry() {
  const CSS_LANG = getCssLang();
  return new Promise(async (resolve, reject) => {
    try {
      if (context_default.opts.site.injectComponentCss) {
        await genStyleDepsMap();
        genPackageStyle({ outputPath: replaceExt(PACKAGE_STYLE_FILE, `.${CSS_LANG}`) });
      }
      genSiteDesktopShared();
      gen_custom_component_default();
      resolve();
    } catch (error) {
      reject(error);
    }
  });
}
async function compileSite(production = false) {
  await genSiteEntry();
  if (production) {
    const config = mergeCustomViteConfig(getViteConfigForSiteProd());
    await build(config);
  } else {
    const config = mergeCustomViteConfig(getViteConfigForSiteDev());
    const server = await createServer(config);
    updateServer(server);
    await server.listen();
    watchSiteShared();
    watchConfig();
    signit();
    const require2 = createRequire(import.meta.url);
    const { version } = require2("vite/package.json");
    const viteInfo = chalk.cyan(`vite v${version}`);
    console.log(`
  ${viteInfo}${chalk.green(` dev server running at:
`)}`);
    server.printUrls();
  }
}

// src/common/restart.ts
async function restart() {
  await genSiteEntry();
}

export {
  restart,
  watchSiteShared,
  watchConfig,
  genSiteEntry,
  compileSite
};
