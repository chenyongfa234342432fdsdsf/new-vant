import {
  clearDepsCache,
  getDeps
} from "./chunk-2CSJUSYL.js";
import {
  getCssLang
} from "./chunk-67CKMM2A.js";
import {
  getComponents,
  smartOutputFile
} from "./chunk-PLIM7P7F.js";
import {
  context_default
} from "./chunk-WOQRSCMF.js";
import {
  STYLE_DEPS_JSON_FILE
} from "./chunk-D3YCLLHO.js";

// src/compiler/gen-style-deps-map.ts
import { join } from "path";
import fse from "fs-extra";
import slash from "slash2";
var { existsSync } = fse;
function checkStyleExists(component) {
  var _a, _b;
  const CSS_LANG = getCssLang();
  const stylePath = join(component, "..", (_b = (_a = context_default.opts) == null ? void 0 : _a.build) == null ? void 0 : _b.style);
  return existsSync(stylePath);
}
function analyzeComponentDeps(components, componentEntry) {
  const checkList = [];
  const record = /* @__PURE__ */ new Set();
  function search(filePath) {
    record.add(filePath);
    getDeps(filePath).forEach((key) => {
      if (record.has(key)) {
        return;
      }
      search(key);
      components.forEach((item) => {
        if (!checkList.includes(item)) {
          checkList.push(item);
        }
      });
    });
  }
  search(componentEntry);
  return checkList.filter(checkStyleExists);
}
function getSequence(components, depsMap) {
  const sequence = [];
  const record = /* @__PURE__ */ new Set();
  function add(item) {
    const deps = depsMap[item];
    if (sequence.includes(item) || !deps) {
      return;
    }
    if (record.has(item)) {
      sequence.push(item);
      return;
    }
    record.add(item);
    if (!deps.length) {
      sequence.push(item);
      return;
    }
    deps.forEach(add);
    if (sequence.includes(item)) {
      return;
    }
    const maxIndex = Math.max(...deps.map((dep) => sequence.indexOf(dep)));
    sequence.splice(maxIndex + 1, 0, item);
  }
  components.forEach(add);
  return sequence;
}
async function genStyleDepsMap() {
  const components = getComponents();
  return new Promise((resolve) => {
    clearDepsCache();
    const map = {};
    components.forEach((component) => {
      map[slash(component)] = analyzeComponentDeps(components, component);
    });
    const sequence = getSequence(components, map);
    Object.keys(map).forEach((key) => {
      map[key] = map[key].sort((a, b) => sequence.indexOf(a) - sequence.indexOf(b));
    });
    smartOutputFile(STYLE_DEPS_JSON_FILE, JSON.stringify({ map, sequence }, null, 2));
    resolve(true);
  });
}

export {
  checkStyleExists,
  genStyleDepsMap
};
