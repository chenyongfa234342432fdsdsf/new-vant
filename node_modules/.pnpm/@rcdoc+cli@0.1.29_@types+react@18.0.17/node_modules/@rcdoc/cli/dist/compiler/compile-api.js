import {
  __objRest
} from "../chunk-OKPPX6YV.js";

// src/compiler/compile-api.ts
import * as parser from "react-docgen-typescript";
import { buildFilter as getBuiltinFilter } from "react-docgen-typescript/lib/buildFilter.js";
var DEFAULT_EXPORTS = [
  "default",
  "__function",
  "Stateless",
  "StyledComponentClass",
  "StyledComponent",
  "FunctionComponent",
  "StatelessComponent",
  "ForwardRefExoticComponent"
];
function extraFilter(prop, opts) {
  if (opts.skipNodeModules && prop.declarations.find((d) => d.fileName.includes("node_modules"))) {
    return false;
  }
  return true;
}
var compile_api_default = (filePath, _a = {}, remarkOpts) => {
  var _b = _a, { componentName } = _b, filterOpts = __objRest(_b, ["componentName"]);
  let definitions;
  let localFilter = filterOpts;
  const globalFilter = remarkOpts == null ? void 0 : remarkOpts.propFilter;
  const isDefaultRegExp = new RegExp(`^${componentName}$`, "i");
  switch (typeof globalFilter) {
    case "function":
      localFilter = globalFilter;
      break;
    default:
      localFilter = ((mergedOpts) => (prop, component) => {
        const builtinFilter = getBuiltinFilter({ propFilter: mergedOpts });
        return builtinFilter(prop, component) && extraFilter(prop, mergedOpts);
      })(Object.assign({}, globalFilter, localFilter));
  }
  if (!definitions) {
    let defaultDefinition;
    definitions = {};
    parser.withCompilerOptions({ esModuleInterop: true, jsx: "preserve" }, {
      savePropValueAsString: true,
      shouldExtractLiteralValuesFromEnum: true,
      shouldRemoveUndefinedFromOptional: true,
      componentNameResolver: (source) => {
        return DEFAULT_EXPORTS.includes(source.getName()) ? componentName : void 0;
      },
      propFilter: localFilter
    }).parse(filePath).forEach((item) => {
      const exportName = isDefaultRegExp.test(item.displayName) ? "default" : item.displayName;
      const props = Object.entries(item.props).map(([identifier, prop]) => {
        const result = { identifier };
        const fields = ["identifier", "description", "type", "defaultValue", "required"];
        const localeDescReg = /(?:^|\n+)@description\s+/;
        fields.forEach((field) => {
          switch (field) {
            case "type":
              result.type = prop.type.raw || prop.type.name;
              break;
            case "description":
              if (localeDescReg.test(prop.description)) {
                const groups = prop.description.split(localeDescReg).filter(Boolean);
                groups == null ? void 0 : groups.forEach((str) => {
                  const [, locale, content] = str.match(/^(\.[\w-]+)?\s*([^]*)$/);
                  result[`description${locale || ""}`] = content;
                });
              } else if (prop.description) {
                result.description = prop.description;
              }
              break;
            case "defaultValue":
              if (prop[field]) {
                result.default = prop[field].value;
              }
              break;
            default:
              if (prop[field]) {
                result[field] = prop[field];
              }
          }
        });
        return result;
      });
      if (exportName === "default") {
        defaultDefinition = props;
      } else {
        definitions[exportName] = props;
      }
    });
    if (defaultDefinition) {
      definitions = Object.assign({ default: defaultDefinition }, definitions);
    }
  }
  return definitions;
};
export {
  compile_api_default as default
};
