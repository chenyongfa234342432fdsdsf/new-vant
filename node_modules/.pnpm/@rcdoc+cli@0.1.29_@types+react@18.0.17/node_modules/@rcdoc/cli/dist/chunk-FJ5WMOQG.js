import {
  getConfigThemeAlias,
  getEntryPath,
  isObject,
  setBuildTarget
} from "./chunk-PLIM7P7F.js";
import {
  context_default
} from "./chunk-WOQRSCMF.js";
import {
  CWD,
  PROJECT_CLI_DIST_DIR,
  PROJECT_SITE_DIST_DIR,
  ROOT,
  SITE_SRC_DIR,
  getPackageJson
} from "./chunk-D3YCLLHO.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-OKPPX6YV.js";

// src/config/vite.site.ts
import path from "path";
import slash from "slash2";
import { get } from "lodash-es";
import react from "@rcdoc/plugin-react";
import { createHtmlPlugin } from "vite-plugin-html";
import mdParser from "@rcdoc/vitejs-plugin";
var projectPackageJson = getPackageJson();
function getTitle(config) {
  let { title } = config;
  if (config.description) {
    title += ` - ${config.description}`;
  }
  return title;
}
function getHTMLMetas(metas) {
  if (Array.isArray(metas)) {
    return metas.map((meta) => `<meta name="${meta.name}" content="${meta.content}">`).join("\n");
  }
  return "";
}
function getHTMLHeadScripts(scripts) {
  if (Array.isArray(scripts)) {
    return scripts.map((script) => {
      if (typeof script === "string") {
        if (/^(https?:)?\/\//.test(script))
          return `<script src="${script}"><\/script>`;
        return `<script>${script}<\/script>`;
      }
      if (isObject(script))
        return script.toString();
      return "";
    }).join("\n");
  }
  return "";
}
var IGNORE_BUILD_ALIAS_DEPS = ["react", "react-dom", "react-router-dom", "@rcdoc/cli"];
function getViteConfigForSiteDev() {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
  setBuildTarget("site");
  const title = getTitle(context_default.opts);
  const themeAlias = getConfigThemeAlias();
  const projectDepsAlias = Object.keys(projectPackageJson.dependencies || {}).reduce((a, v) => {
    if (!IGNORE_BUILD_ALIAS_DEPS.includes(v)) {
      a[v] = slash(path.join(ROOT, "node_modules", v));
    }
    return a;
  }, {});
  const entry = getEntryPath();
  return {
    base: ((_b = (_a = context_default.opts) == null ? void 0 : _a.vite) == null ? void 0 : _b.base) || "./",
    root: SITE_SRC_DIR,
    publicDir: path.join(CWD, ((_d = (_c = context_default.opts) == null ? void 0 : _c.vite) == null ? void 0 : _d.publicDir) || "public"),
    plugins: [
      react({ resolveNodeModules: true }),
      mdParser({
        passivePreview: (_e = context_default.opts.resolve) == null ? void 0 : _e.passivePreview,
        previewLangs: (_f = context_default.opts.resolve) == null ? void 0 : _f.previewLangs
      }),
      createHtmlPlugin({
        inject: {
          data: {
            title,
            description: context_default.opts.description,
            logo: context_default.opts.logo,
            favicon: (_g = context_default.opts.site) == null ? void 0 : _g.favicon,
            vconsole: (_i = (_h = context_default.opts) == null ? void 0 : _h.site) == null ? void 0 : _i.vconsole,
            routerBase: ((_k = (_j = context_default.opts) == null ? void 0 : _j.vite) == null ? void 0 : _k.base) || "/",
            metas: getHTMLMetas((_m = (_l = context_default.opts) == null ? void 0 : _l.site) == null ? void 0 : _m.metas),
            headScripts: getHTMLHeadScripts((_o = (_n = context_default.opts) == null ? void 0 : _n.site) == null ? void 0 : _o.headScripts)
          }
        }
      })
    ],
    resolve: {
      alias: __spreadProps(__spreadValues(__spreadValues({}, projectDepsAlias), themeAlias), {
        [projectPackageJson.name]: entry,
        "@@rcdoc": PROJECT_CLI_DIST_DIR
      }),
      dedupe: ["react", "react-dom"]
    },
    optimizeDeps: __spreadProps(__spreadValues({}, (_q = (_p = context_default.opts) == null ? void 0 : _p.vite) == null ? void 0 : _q.optimizeDeps), {
      include: [
        "react",
        "react-dom",
        "react-router-dom",
        ...((_t = (_s = (_r = context_default.opts) == null ? void 0 : _r.vite) == null ? void 0 : _s.optimizeDeps) == null ? void 0 : _t.include) || []
      ],
      entries: [
        path.join(SITE_SRC_DIR, "index.html"),
        entry,
        ...((_w = (_v = (_u = context_default.opts) == null ? void 0 : _u.vite) == null ? void 0 : _v.optimizeDeps) == null ? void 0 : _w.entries) || []
      ]
    }),
    server: __spreadValues({
      port: 4e3
    }, (_y = (_x = context_default.opts) == null ? void 0 : _x.vite) == null ? void 0 : _y.server)
  };
}
function getViteConfigForSiteProd() {
  var _a, _b;
  const devConfig = getViteConfigForSiteDev();
  const outDir = get(context_default.opts, "build.site.outputDir", PROJECT_SITE_DIST_DIR);
  return __spreadProps(__spreadValues({}, devConfig), {
    base: ((_b = (_a = context_default.opts) == null ? void 0 : _a.vite) == null ? void 0 : _b.base) || "/",
    build: {
      outDir,
      brotliSize: false,
      emptyOutDir: true,
      cssTarget: ["chrome53"],
      rollupOptions: {
        input: {
          main: path.join(SITE_SRC_DIR, "index.html")
        }
      }
    }
  });
}

export {
  getViteConfigForSiteDev,
  getViteConfigForSiteProd
};
